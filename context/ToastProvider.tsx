import React, { createContext, useContext, useState, ReactNode } from 'react';import Toast, { ToastType } from '@/components/ui/Toast';interface ToastContextType {  showToast: (message: string, type: ToastType, action?: { label: string; onPress: () => void }) => void;  hideToast: () => void;}const ToastContext = createContext<ToastContextType | undefined>(undefined);export const useToast = () => {  const context = useContext(ToastContext);  if (!context) {    throw new Error('useToast must be used within a ToastProvider');  }  return context;};interface ToastProviderProps {  children: ReactNode;}export const ToastProvider: React.FC<ToastProviderProps> = ({ children }) => {  const [toast, setToast] = useState<{    visible: boolean;    message: string;    type: ToastType;    action?: { label: string; onPress: () => void };  }>({    visible: false,    message: '',    type: 'info',  });  const showToast = (    message: string,     type: ToastType,     action?: { label: string; onPress: () => void }  ) => {    setToast({      visible: true,      message,      type,      action,    });  };  const hideToast = () => {    setToast(prev => ({      ...prev,      visible: false,    }));  };  return (    <ToastContext.Provider value={{ showToast, hideToast }}>      {children}      <Toast        visible={toast.visible}        message={toast.message}        type={toast.type}        action={toast.action}        onHide={hideToast}      />    </ToastContext.Provider>  );};