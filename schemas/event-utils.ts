import { Timestamp } from 'firebase/firestore';import {   TransactionEvent,   SaleEvent,   PaymentEvent,  CreateSaleEventData,  CreatePaymentEventData,  isSaleEvent,  isPaymentEvent} from './types';export function createSaleEventData(params: {  clienteId: string;  producto: string;  cantidad: number;  costoUnitario: number;  gananciaUnitaria: number;  fecha?: Timestamp;  productoColor?: string;  notas?: string;}): CreateSaleEventData {  const {    clienteId,    producto,    cantidad,    costoUnitario,    gananciaUnitaria,    fecha = Timestamp.now(),    productoColor,    notas  } = params;  const totalVenta = cantidad * (costoUnitario + gananciaUnitaria);  return {    clienteId,    tipo: 'venta',    fecha,    producto,    productoColor,    cantidad,    costoUnitario,    gananciaUnitaria,    totalVenta,    notas  };}export function createPaymentEventData(params: {  clienteId: string;  montoPago: number;  fecha?: Timestamp;  notas?: string;}): CreatePaymentEventData {  const {    clienteId,    montoPago,    fecha = Timestamp.now(),    notas  } = params;  return {    clienteId,    tipo: 'pago',    fecha,    montoPago,    notas  };}export function calculateSaleTotal(cantidad: number, costoUnitario: number, gananciaUnitaria: number): number {  return cantidad * (costoUnitario + gananciaUnitaria);}export function recalculateSaleTotal(saleEvent: SaleEvent): SaleEvent {  const newTotal = calculateSaleTotal(    saleEvent.cantidad,    saleEvent.costoUnitario,    saleEvent.gananciaUnitaria  );  return {    ...saleEvent,    totalVenta: newTotal  };}export function getEventMonetaryImpact(event: TransactionEvent): number {  if (isSaleEvent(event)) {    return event.totalVenta;  } else if (isPaymentEvent(event)) {    return -event.montoPago;  }  return 0;}export function formatEventForDisplay(event: TransactionEvent): {  type: 'sale' | 'payment';  description: string;  amount: number;  date: Date;  hasNotes: boolean;} {  const baseInfo = {    date: event.fecha.toDate(),    hasNotes: Boolean(event.notas && event.notas.trim().length > 0)  };  if (isSaleEvent(event)) {    return {      ...baseInfo,      type: 'sale',      description: `${event.producto} x${event.cantidad}`,      amount: event.totalVenta    };  } else {    return {      ...baseInfo,      type: 'payment',      description: 'Pago recibido',      amount: event.montoPago    };  }}export function sortEventsByDate(events: TransactionEvent[], ascending: boolean = false): TransactionEvent[] {  return [...events].sort((a, b) => {    const aTime = a.fecha.toMillis();    const bTime = b.fecha.toMillis();    return ascending ? aTime - bTime : bTime - aTime;  });}export function filterActiveEvents(events: TransactionEvent[]): TransactionEvent[] {  return events.filter(event => !event.borrado);}export function filterEventsByType(events: TransactionEvent[], type: 'venta' | 'pago'): TransactionEvent[] {  return events.filter(event => event.tipo === type);}export function filterEventsByDateRange(  events: TransactionEvent[],   startDate: Date,   endDate: Date): TransactionEvent[] {  const startTime = startDate.getTime();  const endTime = endDate.getTime();  return events.filter(event => {    const eventTime = event.fecha.toDate().getTime();    return eventTime >= startTime && eventTime <= endTime;  });}export function isEventEditable(event: TransactionEvent): boolean {  if (event.borrado) return false;  const daysSinceCreation = (Date.now() - event.creado.toMillis()) / (1000 * 60 * 60 * 24);  return daysSinceCreation <= 30;}export function isEventDeletable(event: TransactionEvent): boolean {  if (event.borrado) return false;  const daysSinceCreation = (Date.now() - event.creado.toMillis()) / (1000 * 60 * 60 * 24);  return daysSinceCreation <= 30;}export function getEditRestrictionReason(event: TransactionEvent): string | null {  if (event.borrado) {    return 'No se puede editar un evento eliminado';  }  const daysSinceCreation = (Date.now() - event.creado.toMillis()) / (1000 * 60 * 60 * 24);  if (daysSinceCreation > 30) {    return 'No se pueden editar eventos de más de 30 días';  }  return null;}export function getDeleteRestrictionReason(event: TransactionEvent): string | null {  if (event.borrado) {    return 'El evento ya está eliminado';  }  const daysSinceCreation = (Date.now() - event.creado.toMillis()) / (1000 * 60 * 60 * 24);  if (daysSinceCreation > 30) {    return 'No se pueden eliminar eventos de más de 30 días';  }  return null;}export function cloneEventWithNewDate(event: TransactionEvent, newDate: Timestamp): CreateSaleEventData | CreatePaymentEventData {  if (isSaleEvent(event)) {    return createSaleEventData({      clienteId: event.clienteId,      producto: event.producto,      cantidad: event.cantidad,      costoUnitario: event.costoUnitario,      gananciaUnitaria: event.gananciaUnitaria,      fecha: newDate,      productoColor: event.productoColor,      notas: event.notas    });  } else {    return createPaymentEventData({      clienteId: event.clienteId,      montoPago: event.montoPago,      fecha: newDate,      notas: event.notas    });  }}export function createEventTemplate(event: TransactionEvent): Partial<CreateSaleEventData | CreatePaymentEventData> {  const baseTemplate = {    clienteId: event.clienteId,    tipo: event.tipo,    notas: event.notas  };  if (isSaleEvent(event)) {    return {      ...baseTemplate,      producto: event.producto,      productoColor: event.productoColor,    };  } else {    return baseTemplate;  }}