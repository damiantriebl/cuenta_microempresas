import AsyncStorage from '@react-native-async-storage/async-storage';import { Timestamp } from 'firebase/firestore';import {   Product,   Client,   TransactionEvent,   CompanyMember,  Company } from '@/schemas/types';const STORAGE_KEYS = {  PRODUCTS: (empresaId: string) => `offline_products_${empresaId}`,  CLIENTS: (empresaId: string) => `offline_clients_${empresaId}`,  EVENTS: (empresaId: string, clientId: string) => `offline_events_${empresaId}_${clientId}`,  MEMBERS: (empresaId: string) => `offline_members_${empresaId}`,  COMPANY: (empresaId: string) => `offline_company_${empresaId}`,  SYNC_QUEUE: 'offline_sync_queue',  FAILED_ITEMS: 'offline_failed_items',  LAST_SYNC: (empresaId: string) => `last_sync_${empresaId}`,  CONNECTION_STATUS: 'connection_status',  SYNC_STATS: 'offline_sync_stats',} as const;interface CachedData<T> {  data: T;  timestamp: number;  version: number;}interface SyncQueueItem {  id: string;  type: 'create' | 'update' | 'delete';  collection: 'products' | 'clients' | 'events' | 'members';  empresaId: string;  documentId?: string;  data?: any;  timestamp: number;  retryCount: number;  maxRetries: number;  status: 'pending' | 'processing' | 'failed' | 'completed';  lastError?: string;  priority: 'low' | 'normal' | 'high';}interface ConflictResolution {  strategy: 'server_wins' | 'client_wins' | 'merge' | 'manual';  mergeFields?: string[];}interface SyncStats {  totalProcessed: number;  totalFailed: number;  lastSyncAttempt: number;  lastSuccessfulSync: number;  averageProcessingTime: number;}interface FailedSyncItem extends SyncQueueItem {  failedAt: number;  finalError: string;}export class OfflineDataManager {  private static instance: OfflineDataManager;  private syncQueue: SyncQueueItem[] = [];  private isOnline: boolean = true;  private syncInProgress: boolean = false;  static getInstance(): OfflineDataManager {    if (!OfflineDataManager.instance) {      OfflineDataManager.instance = new OfflineDataManager();    }    return OfflineDataManager.instance;  }  constructor() {    this.loadSyncQueue();    this.loadConnectionStatus();  }  async setConnectionStatus(isOnline: boolean): Promise<void> {    this.isOnline = isOnline;    await AsyncStorage.setItem(STORAGE_KEYS.CONNECTION_STATUS, JSON.stringify(isOnline));    if (isOnline && !this.syncInProgress) {      await this.processSyncQueue();    }  }  getConnectionStatus(): boolean {    return this.isOnline;  }  private async loadConnectionStatus(): Promise<void> {    try {      const status = await AsyncStorage.getItem(STORAGE_KEYS.CONNECTION_STATUS);      this.isOnline = status ? JSON.parse(status) : true;    } catch (error) {      console.error('Error loading connection status:', error);      this.isOnline = true;    }  }  async cacheProducts(empresaId: string, products: Product[]): Promise<void> {    const cachedData: CachedData<Product[]> = {      data: products,      timestamp: Date.now(),      version: 1    };    await AsyncStorage.setItem(      STORAGE_KEYS.PRODUCTS(empresaId),       JSON.stringify(cachedData)    );    await this.updateLastSync(empresaId, 'products');  }  async getCachedProducts(empresaId: string): Promise<Product[] | null> {    try {      const cached = await AsyncStorage.getItem(STORAGE_KEYS.PRODUCTS(empresaId));      if (cached) {        const cachedData: CachedData<Product[]> = JSON.parse(cached);        return cachedData.data;      }    } catch (error) {      console.error('Error getting cached products:', error);    }    return null;  }  async cacheClients(empresaId: string, clients: Client[]): Promise<void> {    const cachedData: CachedData<Client[]> = {      data: clients,      timestamp: Date.now(),      version: 1    };    await AsyncStorage.setItem(      STORAGE_KEYS.CLIENTS(empresaId),       JSON.stringify(cachedData)    );    await this.updateLastSync(empresaId, 'clients');  }  async getCachedClients(empresaId: string): Promise<Client[] | null> {    try {      const cached = await AsyncStorage.getItem(STORAGE_KEYS.CLIENTS(empresaId));      if (cached) {        const cachedData: CachedData<Client[]> = JSON.parse(cached);        return cachedData.data;      }    } catch (error) {      console.error('Error getting cached clients:', error);    }    return null;  }  async cacheEvents(empresaId: string, clientId: string, events: TransactionEvent[]): Promise<void> {    const serializeTs = (value: any) => {      if (value instanceof Timestamp) {        return { seconds: value.seconds, nanoseconds: value.nanoseconds };      }      return value;    };    const serialized = events.map(e => ({      ...e,      fecha: serializeTs(e.fecha),      creado: serializeTs(e.creado),      editado: serializeTs(e.editado),    }));    const cachedData: CachedData<any[]> = {      data: serialized,      timestamp: Date.now(),      version: 1    };    await AsyncStorage.setItem(      STORAGE_KEYS.EVENTS(empresaId, clientId),       JSON.stringify(cachedData)    );    await this.updateLastSync(empresaId, 'events');  }  async getCachedEvents(empresaId: string, clientId: string): Promise<TransactionEvent[] | null> {    try {      const cached = await AsyncStorage.getItem(STORAGE_KEYS.EVENTS(empresaId, clientId));      if (cached) {        const cachedData: CachedData<any[]> = JSON.parse(cached);        const reviveTs = (value: any) => {          if (!value) return value;          if (value instanceof Timestamp) return value;          if (typeof value === 'object' && typeof value.seconds === 'number' && typeof value.nanoseconds === 'number') {            return new Timestamp(value.seconds, value.nanoseconds);          }          if (typeof value === 'number') {            return Timestamp.fromMillis(value);          }          return value;        };        const events: TransactionEvent[] = cachedData.data.map((e: any) => ({          ...e,          fecha: reviveTs(e.fecha),          creado: reviveTs(e.creado),          editado: reviveTs(e.editado),        }));        return events;      }    } catch (error) {      console.error('Error getting cached events:', error);    }    return null;  }  async cacheMembers(empresaId: string, members: CompanyMember[]): Promise<void> {    const cachedData: CachedData<CompanyMember[]> = {      data: members,      timestamp: Date.now(),      version: 1    };    await AsyncStorage.setItem(      STORAGE_KEYS.MEMBERS(empresaId),       JSON.stringify(cachedData)    );    await this.updateLastSync(empresaId, 'members');  }  async getCachedMembers(empresaId: string): Promise<CompanyMember[] | null> {    try {      const cached = await AsyncStorage.getItem(STORAGE_KEYS.MEMBERS(empresaId));      if (cached) {        const cachedData: CachedData<CompanyMember[]> = JSON.parse(cached);        return cachedData.data;      }    } catch (error) {      console.error('Error getting cached members:', error);    }    return null;  }  async cacheCompany(empresaId: string, company: Company): Promise<void> {    const cachedData: CachedData<Company> = {      data: company,      timestamp: Date.now(),      version: 1    };    await AsyncStorage.setItem(      STORAGE_KEYS.COMPANY(empresaId),       JSON.stringify(cachedData)    );    await this.updateLastSync(empresaId, 'company');  }  async getCachedCompany(empresaId: string): Promise<Company | null> {    try {      const cached = await AsyncStorage.getItem(STORAGE_KEYS.COMPANY(empresaId));      if (cached) {        const cachedData: CachedData<Company> = JSON.parse(cached);        return cachedData.data;      }    } catch (error) {      console.error('Error getting cached company:', error);    }    return null;  }  async addToSyncQueue(item: Omit<SyncQueueItem, 'id' | 'timestamp' | 'retryCount' | 'status' | 'priority'>): Promise<void> {    const queueItem: SyncQueueItem = {      ...item,      id: `${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,      timestamp: Date.now(),      retryCount: 0,      maxRetries: item.maxRetries || 3,      status: 'pending',      priority: 'normal'    };    this.syncQueue.push(queueItem);    await this.saveSyncQueue();    console.log('Added item to sincronización queue:', {      id: queueItem.id,      type: queueItem.type,      collection: queueItem.collection,      queueLength: this.syncQueue.length    });    if (this.isOnline && !this.syncInProgress) {      await this.processSyncQueue();    }  }  private async loadSyncQueue(): Promise<void> {    try {      const queue = await AsyncStorage.getItem(STORAGE_KEYS.SYNC_QUEUE);      this.syncQueue = queue ? JSON.parse(queue) : [];    } catch (error) {      console.error('Error loading sync queue:', error);      this.syncQueue = [];    }  }  private async saveSyncQueue(): Promise<void> {    try {      await AsyncStorage.setItem(STORAGE_KEYS.SYNC_QUEUE, JSON.stringify(this.syncQueue));    } catch (error) {      console.error('Error saving sync queue:', error);    }  }  async processSyncQueue(): Promise<{ processed: number; failed: number; remaining: number }> {    if (!this.isOnline || this.syncInProgress || this.syncQueue.length === 0) {      return { processed: 0, failed: 0, remaining: this.syncQueue.length };    }    this.syncInProgress = true;    let processedCount = 0;    let failedCount = 0;    console.log('Iniciando sincronización queue procesando:', {      queueLength: this.syncQueue.length,      isOnline: this.isOnline    });    try {      const startTime = Date.now();      const itemsToProcess = [...this.syncQueue]        .filter(item => item.status === 'pending' || item.status === 'failed')        .sort((a, b) => {          if (a.priority !== b.priority) {            const priorityOrder = { high: 3, normal: 2, low: 1 };            return priorityOrder[b.priority] - priorityOrder[a.priority];          }          return a.timestamp - b.timestamp;        });      for (const item of itemsToProcess) {        try {          console.log('Procesando sincronización item:', {            id: item.id,            type: item.type,            collection: item.collection,            retryCount: item.retryCount          });          const queueItem = this.syncQueue.find(q => q.id === item.id);          if (queueItem) {            queueItem.status = 'processing';          }          await this.processSyncItem(item);          this.syncQueue = this.syncQueue.filter(queueItem => queueItem.id !== item.id);          processedCount++;          console.log('Sincronización item processed exitosamente:', item.id);        } catch (error) {          console.error('Error processing sync item:', item.id, error);          failedCount++;          const queueItem = this.syncQueue.find(q => q.id === item.id);          if (queueItem) {            queueItem.retryCount++;            queueItem.status = 'failed';            queueItem.lastError = error instanceof Error ? error.message : String(error);            if (queueItem.retryCount >= queueItem.maxRetries) {              console.error('Max retries exceeded for sync item:', {                id: queueItem.id,                type: queueItem.type,                collection: queueItem.collection,                retryCount: queueItem.retryCount,                maxRetries: queueItem.maxRetries,                lastError: queueItem.lastError              });              await this.moveToFailedItems(queueItem);              this.syncQueue = this.syncQueue.filter(q => q.id !== item.id);            } else {              queueItem.status = 'pending';            }          }        }      }      await this.saveSyncQueue();      const processingTime = Date.now() - startTime;      await this.updateSyncStats(processedCount, failedCount, processingTime);      console.log('Sincronización queue procesando completado:', {        processed: processedCount,        falló: failedCount,        remaining: this.syncQueue.length,        processingTime: `${processingTime}ms`      });    } finally {      this.syncInProgress = false;    }    return {       processed: processedCount,       failed: failedCount,       remaining: this.syncQueue.length     };  }  private async processSyncItem(item: SyncQueueItem): Promise<void> {    console.log('Procesando sincronización item:', item);    try {      switch (item.collection) {        case 'products':          await this.syncProductOperation(item);          break;        case 'clients':          await this.syncClientOperation(item);          break;        case 'events':          await this.syncEventOperation(item);          break;        case 'members':          await this.syncMemberOperation(item);          break;        default:          throw new Error(`Unknown collection type: ${item.collection}`);      }      console.log('Sincronización item processed exitosamente:', item.id);    } catch (error) {      console.error('Error processing sync item:', item.id, error);      throw error;    }  }  private async syncProductOperation(item: SyncQueueItem): Promise<void> {    let ProductService: any;    try {      ProductService = require('./ProductService').ProductService;    } catch (error) {      ProductService = { getInstance: () => ({ createProduct: () => Promise.resolve({ success: true }) }) };    }    const productService = ProductService.getInstance();    switch (item.type) {      case 'create':        const createResult = await productService.createProduct(item.empresaId, item.data);        if (!createResult.success) {          throw new Error(createResult.error?.message || 'Failed to create product');        }        break;      case 'update':        if (!item.documentId) throw new Error('Document ID required for update');        const updateResult = await productService.updateProduct(item.empresaId, item.documentId, item.data);        if (!updateResult.success) {          throw new Error(updateResult.error?.message || 'Failed to update product');        }        break;      case 'delete':        if (!item.documentId) throw new Error('Document ID required for delete');        const deleteResult = await productService.deleteProduct(item.empresaId, item.documentId);        if (!deleteResult.success) {          throw new Error(deleteResult.error?.message || 'Failed to delete product');        }        break;      default:        throw new Error(`Unknown operation type: ${item.type}`);    }  }  private async syncClientOperation(item: SyncQueueItem): Promise<void> {    let ClientService: any;    try {      ClientService = require('./ClientService').ClientService;    } catch (error) {      ClientService = function() {         return {           createClient: () => Promise.resolve({ success: true }),          updateClient: () => Promise.resolve({ success: true }),          deleteClient: () => Promise.resolve({ success: true }),          toggleClientVisibility: () => Promise.resolve({ success: true })        };       };    }    const clientService = new ClientService(item.empresaId);    switch (item.type) {      case 'create':        const createResult = await clientService.createClient(item.data);        if (!createResult.success) {          throw new Error(createResult.error?.message || 'Failed to create client');        }        break;      case 'update':        if (!item.documentId) throw new Error('Document ID required for update');        if (item.data.toggleVisibility) {          const toggleResult = await clientService.toggleClientVisibility(item.documentId);          if (!toggleResult.success) {            throw new Error(toggleResult.error?.message || 'Failed to toggle client visibility');          }        } else {          const updateResult = await clientService.updateClient(item.documentId, item.data);          if (!updateResult.success) {            throw new Error(updateResult.error?.message || 'Failed to update client');          }        }        break;      case 'delete':        if (!item.documentId) throw new Error('Document ID required for delete');        const deleteResult = await clientService.deleteClient(item.documentId);        if (!deleteResult.success) {          throw new Error(deleteResult.error?.message || 'Failed to delete client');        }        break;      default:        throw new Error(`Unknown operation type: ${item.type}`);    }  }  private async syncEventOperation(item: SyncQueueItem): Promise<void> {    let TransactionEventService: any;    try {      TransactionEventService = require('./TransactionEventService').TransactionEventService;    } catch (error) {      TransactionEventService = {        createSaleEvent: () => Promise.resolve({ success: true }),        createPaymentEvent: () => Promise.resolve({ success: true }),        updateEvent: () => Promise.resolve({ success: true }),        deleteEvent: () => Promise.resolve({ success: true })      };    }    switch (item.type) {      case 'create':        if (item.data.tipo === 'venta') {          const createResult = await TransactionEventService.createSaleEvent(item.empresaId, item.data);          if (!createResult.success) {            throw new Error(createResult.error?.message || 'Failed to create sale event');          }        } else if (item.data.tipo === 'pago') {          const createResult = await TransactionEventService.createPaymentEvent(item.empresaId, item.data);          if (!createResult.success) {            throw new Error(createResult.error?.message || 'Failed to create payment event');          }        } else {          throw new Error(`Unknown event type: ${item.data.tipo}`);        }        break;      case 'update':        if (!item.documentId) throw new Error('Document ID required for update');        const updateResult = await TransactionEventService.updateEvent(item.empresaId, item.documentId, item.data);        if (!updateResult.success) {          throw new Error(updateResult.error?.message || 'Failed to update event');        }        break;      case 'delete':        if (!item.documentId) throw new Error('Document ID required for delete');        const deleteResult = await TransactionEventService.deleteEvent(item.empresaId, item.documentId);        if (!deleteResult.success) {          throw new Error(deleteResult.error?.message || 'Failed to delete event');        }        break;      default:        throw new Error(`Unknown operation type: ${item.type}`);    }  }  private async syncMemberOperation(item: SyncQueueItem): Promise<void> {    console.log('Member sincronización operation not implemented:', item);    throw new Error('Member sync operations not implemented');  }  async resolveConflict<T>(    localData: T,    serverData: T,    resolution: ConflictResolution  ): Promise<T> {    switch (resolution.strategy) {      case 'server_wins':        return serverData;      case 'client_wins':        return localData;      case 'merge':        if (resolution.mergeFields) {          const merged = { ...serverData };          for (const field of resolution.mergeFields) {            if (localData && typeof localData === 'object' && field in localData) {              (merged as any)[field] = (localData as any)[field];            }          }          return merged;        }        return { ...serverData, ...localData };      case 'manual':        console.warn('Manual conflict resolution not implemented, defaulting to server wins');        return serverData;      default:        return serverData;    }  }  async clearCache(empresaId?: string): Promise<void> {    try {      if (empresaId) {        const keys = [          STORAGE_KEYS.PRODUCTS(empresaId),          STORAGE_KEYS.CLIENTS(empresaId),          STORAGE_KEYS.MEMBERS(empresaId),          STORAGE_KEYS.COMPANY(empresaId),          STORAGE_KEYS.LAST_SYNC(empresaId)        ];        await Promise.all(keys.map(key => AsyncStorage.removeItem(key)));        const allKeys = await AsyncStorage.getAllKeys();        const eventKeys = allKeys.filter(key =>           key.startsWith(`offline_events_${empresaId}_`)        );        await Promise.all(eventKeys.map(key => AsyncStorage.removeItem(key)));      } else {        const allKeys = await AsyncStorage.getAllKeys();        const cacheKeys = allKeys.filter(key =>           key.startsWith('offline_') || key.startsWith('last_sync_')        );        await Promise.all(cacheKeys.map(key => AsyncStorage.removeItem(key)));      }    } catch (error) {      console.error('Error clearing cache:', error);    }  }  async getCacheSize(empresaId?: string): Promise<number> {    try {      const allKeys = await AsyncStorage.getAllKeys();      let targetKeys: string[];      if (empresaId) {        targetKeys = allKeys.filter(key =>           key.includes(empresaId) && (key.startsWith('offline_') || key.startsWith('last_sync_'))        );      } else {        targetKeys = allKeys.filter(key =>           key.startsWith('offline_') || key.startsWith('last_sync_')        );      }      const values = await AsyncStorage.multiGet(targetKeys);      let totalSize = 0;      for (const [key, value] of values) {        if (value) {          totalSize += new Blob([value]).size;        }      }      return totalSize;    } catch (error) {      console.error('Error calculating cache size:', error);      return 0;    }  }  private async updateLastSync(empresaId: string, dataType: string): Promise<void> {    try {      const lastSync = await this.getLastSync(empresaId);      lastSync[dataType] = Date.now();      await AsyncStorage.setItem(        STORAGE_KEYS.LAST_SYNC(empresaId),         JSON.stringify(lastSync)      );    } catch (error) {      console.error('Error updating last sync:', error);    }  }  async getLastSync(empresaId: string): Promise<Record<string, number>> {    try {      const lastSync = await AsyncStorage.getItem(STORAGE_KEYS.LAST_SYNC(empresaId));      return lastSync ? JSON.parse(lastSync) : {};    } catch (error) {      console.error('Error getting last sync:', error);      return {};    }  }  getSyncQueueLength(): number {    return this.syncQueue.length;  }  isSyncInProgress(): boolean {    return this.syncInProgress;  }  async isDataStale(empresaId: string, dataType: string, maxAgeMs: number = 5 * 60 * 1000): Promise<boolean> {    const lastSync = await this.getLastSync(empresaId);    const lastSyncTime = lastSync[dataType];    if (!lastSyncTime) return true;    return (Date.now() - lastSyncTime) > maxAgeMs;  }  async getOfflineStats(empresaId: string): Promise<{    cacheSize: number;    queueLength: number;    failedItemsCount: number;    lastSync: Record<string, number>;    isOnline: boolean;    syncInProgress: boolean;    syncStats: SyncStats;    pendingByType: Record<string, number>;  }> {    const syncStats = await this.getSyncStats();    const failedItems = await this.getFailedItems();    const pendingByType = this.syncQueue.reduce((acc, item) => {      const key = `${item.collection}_${item.type}`;      acc[key] = (acc[key] || 0) + 1;      return acc;    }, {} as Record<string, number>);    return {      cacheSize: await this.getCacheSize(empresaId),      queueLength: this.getSyncQueueLength(),      failedItemsCount: failedItems.length,      lastSync: await this.getLastSync(empresaId),      isOnline: this.getConnectionStatus(),      syncInProgress: this.isSyncInProgress(),      syncStats,      pendingByType    };  }  private async moveToFailedItems(item: SyncQueueItem): Promise<void> {    try {      const failedItems = await this.getFailedItems();      const failedItem: FailedSyncItem = {        ...item,        failedAt: Date.now(),        finalError: item.lastError || 'Unknown error'      };      failedItems.push(failedItem);      await AsyncStorage.setItem(STORAGE_KEYS.FAILED_ITEMS, JSON.stringify(failedItems));      console.log('Moved item to falló items:', {        id: item.id,        type: item.type,        collection: item.collection,        retryCount: item.retryCount,        finalError: failedItem.finalError      });    } catch (error) {      console.error('Error moving item to failed items:', error);    }  }  async getFailedItems(): Promise<FailedSyncItem[]> {    try {      const failedItems = await AsyncStorage.getItem(STORAGE_KEYS.FAILED_ITEMS);      return failedItems ? JSON.parse(failedItems) : [];    } catch (error) {      console.error('Error getting failed items:', error);      return [];    }  }  async retryFailedItem(itemId: string): Promise<boolean> {    try {      const failedItems = await this.getFailedItems();      const itemIndex = failedItems.findIndex(item => item.id === itemId);      if (itemIndex === -1) {        console.error('Failed item not found:', itemId);        return false;      }      const failedItem = failedItems[itemIndex];      const retryItem: SyncQueueItem = {        ...failedItem,        status: 'pending',        retryCount: 0,        lastError: undefined      };      this.syncQueue.push(retryItem);      await this.saveSyncQueue();      failedItems.splice(itemIndex, 1);      await AsyncStorage.setItem(STORAGE_KEYS.FAILED_ITEMS, JSON.stringify(failedItems));      console.log('Retrying falló item:', itemId);      if (this.isOnline && !this.syncInProgress) {        await this.processSyncQueue();      }      return true;    } catch (error) {      console.error('Error retrying failed item:', error);      return false;    }  }  async clearFailedItems(): Promise<void> {    try {      await AsyncStorage.removeItem(STORAGE_KEYS.FAILED_ITEMS);      console.log('Limpiado all falló items');    } catch (error) {      console.error('Error clearing failed items:', error);    }  }  private async updateSyncStats(processed: number, failed: number, processingTime: number): Promise<void> {    try {      const stats = await this.getSyncStats();      stats.totalProcessed += processed;      stats.totalFailed += failed;      stats.lastSyncAttempt = Date.now();      if (processed > 0) {        stats.lastSuccessfulSync = Date.now();        const totalOperations = stats.totalProcessed;        stats.averageProcessingTime =           ((stats.averageProcessingTime * (totalOperations - processed)) + processingTime) / totalOperations;      }      await AsyncStorage.setItem(STORAGE_KEYS.SYNC_STATS, JSON.stringify(stats));    } catch (error) {      console.error('Error updating sync stats:', error);    }  }  async getSyncStats(): Promise<SyncStats> {    try {      const stats = await AsyncStorage.getItem(STORAGE_KEYS.SYNC_STATS);      if (stats) {        return JSON.parse(stats);      }    } catch (error) {      console.error('Error getting sync stats:', error);    }    return {      totalProcessed: 0,      totalFailed: 0,      lastSyncAttempt: 0,      lastSuccessfulSync: 0,      averageProcessingTime: 0    };  }  async resetSyncStats(): Promise<void> {    try {      const defaultStats: SyncStats = {        totalProcessed: 0,        totalFailed: 0,        lastSyncAttempt: 0,        lastSuccessfulSync: 0,        averageProcessingTime: 0      };      await AsyncStorage.setItem(STORAGE_KEYS.SYNC_STATS, JSON.stringify(defaultStats));      console.log('Reset sincronización statistics');    } catch (error) {      console.error('Error resetting sync stats:', error);    }  }}export default OfflineDataManager;